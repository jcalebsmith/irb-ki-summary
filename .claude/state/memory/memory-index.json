{
  "version": "1.0.0",
  "updated": "2025-09-02T14:14:27.315984Z",
  "entities": {
    "user_preferences": {
      "type": "user_preference",
      "observations": [
        {
          "content": "Prefers pytest for testing with -v flag for verbose output",
          "timestamp": "2025-09-02T13:32:53.944021Z",
          "confidence": 0.9,
          "access_count": 1,
          "source": "test_script",
          "tags": [
            "testing",
            "pytest"
          ]
        }
      ],
      "relations": []
    },
    ".claude/hooks/shared_state.py": {
      "type": "codebase_artifact",
      "observations": [
        {
          "content": "Contains memory management functions with temporal decay support",
          "timestamp": "2025-09-02T13:32:53.954257Z",
          "confidence": 0.95,
          "access_count": 1,
          "source": "implementation",
          "tags": [
            "memory",
            "persistence"
          ]
        }
      ],
      "relations": []
    },
    "/test/file.py": {
      "type": "codebase_artifact",
      "observations": [
        {
          "content": "Modified during task 'm-implement-persistent-memory-layer' - modified",
          "timestamp": "2025-09-02T13:46:53.922180Z",
          "confidence": 0.8,
          "access_count": 1,
          "source": "tool:Edit",
          "tags": [
            "modified",
            "m-implement-persistent-memory-layer"
          ]
        }
      ],
      "relations": []
    },
    "/test/new_file.js": {
      "type": "codebase_artifact",
      "observations": [
        {
          "content": "Created during task 'm-implement-persistent-memory-layer'",
          "timestamp": "2025-09-02T13:46:53.939014Z",
          "confidence": 0.8,
          "access_count": 1,
          "source": "tool:Write",
          "tags": [
            "created",
            "m-implement-persistent-memory-layer"
          ]
        }
      ],
      "relations": []
    },
    "procedural_commands": {
      "type": "workflow",
      "observations": [
        {
          "content": "Command used: pytest -v tests/",
          "timestamp": "2025-09-02T13:46:53.953007Z",
          "confidence": 0.8,
          "access_count": 1,
          "source": "tool:Bash",
          "tags": [
            "command",
            "m-implement-persistent-memory-layer"
          ]
        }
      ],
      "relations": []
    },
    "error_patterns": {
      "type": "bug_solution",
      "observations": [
        {
          "content": "Error encountered: ImportError: No module named 'tiktoken'",
          "timestamp": "2025-09-02T13:46:53.971354Z",
          "confidence": 0.7,
          "access_count": 1,
          "source": "task:m-implement-persistent-memory-layer",
          "tags": [
            "error",
            "m-implement-persistent-memory-layer"
          ]
        }
      ],
      "relations": []
    },
    "user_preference_coding_style": {
      "type": "user_preference",
      "observations": [
        {
          "content": "Always use type hints in Python code",
          "timestamp": "2025-09-02T13:46:53.989819Z",
          "confidence": 0.85,
          "access_count": 1,
          "source": "user_interaction",
          "tags": [
            "coding_style",
            "preference"
          ]
        }
      ],
      "relations": []
    },
    "user_preference_javascript": {
      "type": "user_preference",
      "observations": [
        {
          "content": "Prefer async/await over callbacks",
          "timestamp": "2025-09-02T13:46:54.001895Z",
          "confidence": 0.85,
          "access_count": 1,
          "source": "user_interaction",
          "tags": [
            "javascript",
            "preference"
          ]
        }
      ],
      "relations": []
    },
    "test_entity_0": {
      "type": "test",
      "observations": [
        {
          "content": "Test observation 0",
          "timestamp": "2025-09-02T14:14:26.766986Z",
          "confidence": 0.8,
          "access_count": 1
        }
      ],
      "relations": []
    },
    "test_entity_1": {
      "type": "test",
      "observations": [
        {
          "content": "Test observation 1",
          "timestamp": "2025-09-02T14:14:26.793079Z",
          "confidence": 0.8,
          "access_count": 1
        }
      ],
      "relations": []
    },
    "test_entity_2": {
      "type": "test",
      "observations": [
        {
          "content": "Test observation 2",
          "timestamp": "2025-09-02T14:14:26.817545Z",
          "confidence": 0.8,
          "access_count": 1
        }
      ],
      "relations": []
    },
    "test_entity_3": {
      "type": "test",
      "observations": [
        {
          "content": "Test observation 3",
          "timestamp": "2025-09-02T14:14:26.841364Z",
          "confidence": 0.8,
          "access_count": 1
        }
      ],
      "relations": []
    },
    "test_entity_4": {
      "type": "test",
      "observations": [
        {
          "content": "Test observation 4",
          "timestamp": "2025-09-02T14:14:26.864380Z",
          "confidence": 0.8,
          "access_count": 1
        }
      ],
      "relations": []
    },
    "test_entity_many_obs": {
      "type": "test",
      "observations": [
        {
          "content": "Observation 0 for same entity",
          "timestamp": "2025-09-02T14:14:27.029307Z",
          "confidence": 0.7,
          "access_count": 1
        },
        {
          "content": "Observation 1 for same entity",
          "timestamp": "2025-09-02T14:14:27.050948Z",
          "confidence": 0.7,
          "access_count": 1
        },
        {
          "content": "Observation 2 for same entity",
          "timestamp": "2025-09-02T14:14:27.071233Z",
          "confidence": 0.7,
          "access_count": 1
        },
        {
          "content": "Observation 3 for same entity",
          "timestamp": "2025-09-02T14:14:27.091513Z",
          "confidence": 0.7,
          "access_count": 1
        },
        {
          "content": "Observation 4 for same entity",
          "timestamp": "2025-09-02T14:14:27.113050Z",
          "confidence": 0.7,
          "access_count": 1
        },
        {
          "content": "Observation 5 for same entity",
          "timestamp": "2025-09-02T14:14:27.135707Z",
          "confidence": 0.7,
          "access_count": 1
        },
        {
          "content": "Observation 6 for same entity",
          "timestamp": "2025-09-02T14:14:27.158277Z",
          "confidence": 0.7,
          "access_count": 1
        },
        {
          "content": "Observation 7 for same entity",
          "timestamp": "2025-09-02T14:14:27.178506Z",
          "confidence": 0.7,
          "access_count": 1
        },
        {
          "content": "Observation 8 for same entity",
          "timestamp": "2025-09-02T14:14:27.198998Z",
          "confidence": 0.7,
          "access_count": 1
        },
        {
          "content": "Observation 9 for same entity",
          "timestamp": "2025-09-02T14:14:27.220065Z",
          "confidence": 0.7,
          "access_count": 1
        }
      ],
      "relations": []
    }
  },
  "relations": {},
  "episodes": [
    {
      "id": "ep_001",
      "task": "m-implement-persistent-memory-layer",
      "timestamp": "2025-09-02T13:32:53.965707Z",
      "learnings": [
        "JSON-based storage is simple and effective for memory persistence",
        "Temporal decay helps maintain relevance of observations",
        "Integration with existing hooks provides seamless memory context"
      ],
      "success": true,
      "patterns_detected": [
        "incremental_development",
        "test_driven"
      ]
    },
    {
      "id": "ep_002",
      "task": "test-memory-system",
      "timestamp": "2025-09-02T13:46:54.013280Z",
      "learnings": [
        "Memory persistence works correctly with JSON storage",
        "Hooks integration provides seamless context capture",
        "Temporal decay helps maintain relevance"
      ],
      "success": true,
      "patterns_detected": [
        "test_driven_development"
      ]
    },
    {
      "id": "ep_003",
      "task": "test_task_0",
      "timestamp": "2025-09-02T14:14:26.899148Z",
      "learnings": [
        "Learning 0.1",
        "Learning 0.2"
      ],
      "success": true
    },
    {
      "id": "ep_004",
      "task": "test_task_1",
      "timestamp": "2025-09-02T14:14:26.924819Z",
      "learnings": [
        "Learning 1.1",
        "Learning 1.2"
      ],
      "success": true
    },
    {
      "id": "ep_005",
      "task": "test_task_2",
      "timestamp": "2025-09-02T14:14:26.951367Z",
      "learnings": [
        "Learning 2.1",
        "Learning 2.2"
      ],
      "success": true
    },
    {
      "id": "ep_006",
      "task": "test_task_3",
      "timestamp": "2025-09-02T14:14:26.977674Z",
      "learnings": [
        "Learning 3.1",
        "Learning 3.2"
      ],
      "success": true
    },
    {
      "id": "ep_007",
      "task": "test_task_4",
      "timestamp": "2025-09-02T14:14:27.003579Z",
      "learnings": [
        "Learning 4.1",
        "Learning 4.2"
      ],
      "success": true
    }
  ],
  "statistics": {
    "total_entities": 14,
    "total_relations": 0,
    "total_episodes": 7,
    "total_observations": 23,
    "last_cleanup": "2025-09-02T14:14:27.314602Z"
  }
}