[
  {
    "role": "user",
    "content": [
      {
        "tool_use_id": "toolu_01QzPduwJzLCnWdu5DxtaxHt",
        "type": "tool_result",
        "content": "     1→\"\"\"\n     2→Informed Consent Key Information Summary Plugin\n     3→Contains KI-specific extraction logic and templates\n     4→\"\"\"\n     5→import sys\n     6→from pathlib import Path\n     7→sys.path.append(str(Path(__file__).parent.parent))\n     8→\n     9→from typing import Dict, Any, List, Optional\n    10→from app.core.plugin_manager import DocumentPlugin, TemplateCatalog, ValidationRuleSet, TemplateSlot, SlotType\n    11→from app.core.llm_integration import get_generic_extractor\n    12→from app.core.multi_agent_system import BaseAgent, AgentRole, AgentContext\n    13→from logger import get_logger\n    14→\n    15→# Set up module logger\n    16→logger = get_logger(\"plugins.informed_consent\")\n    17→\n    18→\n    19→# KI-specific extraction schema\n    20→KI_EXTRACTION_SCHEMA = {\n    21→    \"is_pediatric\": {\n    22→        \"type\": \"boolean\",\n    23→        \"description\": \"Are children eligible to participate? Look for age requirements, pediatric participants, or parent/guardian consent.\"\n    24→    },\n    25→    \"study_type\": {\n    26→        \"type\": \"enum\",\n    27→        \"options\": [\"studying\", \"collecting\"],\n    28→        \"description\": \"Is this study primarily studying/testing something or collecting/gathering something?\"\n    29→    },\n    30→    \"article\": {\n    31→        \"type\": \"enum\",\n    32→        \"options\": [\"a \", \"a new \", \"\"],\n    33→        \"description\": \"What article should precede the study object? 'a ' for existing, 'a new ' for novel, '' for plural/uncountable\"\n    34→    },\n    35→    \"study_object\": {\n    36→        \"type\": \"text\",\n    37→        \"max_words\": 30,\n    38→        \"description\": \"Main object being studied (e.g., drug, device, procedure). Include FDA status if mentioned. Lowercase.\"\n    39→    },\n    40→    \"population\": {\n    41→        \"type\": \"enum\",\n    42→        \"options\": [\"people\", \"large numbers of people\", \"small numbers of people\", \n    43→                   \"children\", \"large numbers of children\", \"small numbers of children\"],\n    44→        \"description\": \"What population will participate?\"\n    45→    },\n    46→    \"study_purpose\": {\n    47→        \"type\": \"text\",\n    48→        \"max_words\": 15,\n    49→        \"description\": \"Main purpose of study in 10-15 words. Simple language, no intro phrases.\"\n    50→    },\n    51→    \"study_goals\": {\n    52→        \"type\": \"text\",\n    53→        \"max_words\": 15,\n    54→        \"description\": \"What study will accomplish in 10-15 words. Simple language, direct statement.\"\n    55→    },\n    56→    \"has_randomization\": {\n    57→        \"type\": \"boolean\",\n    58→        \"description\": \"Does document contain words 'randomize', 'randomization', or 'randomized'?\"\n    59→    },\n    60→    \"requires_washout\": {\n    61→        \"type\": \"boolean\",\n    62→        \"description\": \"Does study require stopping medications before/during participation?\"\n    63→    },\n    64→    \"key_risks\": {\n    65→        \"type\": \"text\",\n    66→        \"max_words\": 30,\n    67→        \"description\": \"2-3 most important risks from study (not standard care). Focus on pain/distress. 30 words max.\"\n    68→    },\n    69→    \"has_direct_benefits\": {\n    70→        \"type\": \"boolean\",\n    71→        \"description\": \"Are there meaningful direct personal benefits to participants?\"\n    72→    },\n    73→    \"benefit_description\": {\n    74→        \"type\": \"text\",\n    75→        \"max_words\": 20,\n    76→        \"description\": \"Benefits summary to complete 'by [text]'. Don't include 'by'. 20 words max.\"\n    77→    },\n    78→    \"study_duration\": {\n    79→        \"type\": \"text\",\n    80→        \"max_words\": 10,\n    81→        \"description\": \"How long participants will be in study (e.g., '6 months', 'up to 2 years'). 10 words max.\"\n    82→    },\n    83→    \"affects_treatment\": {\n    84→        \"type\": \"boolean\",\n    85→        \"description\": \"Does participation affect current/future treatment options?\"\n    86→    },\n    87→    \"alternative_options\": {\n    88→        \"type\": \"text\",\n    89→        \"max_words\": 20,\n    90→        \"description\": \"Treatment alternatives if study affects options. 20 words max.\"\n    91→    },\n    92→    \"collects_biospecimens\": {\n    93→        \"type\": \"boolean\",\n    94→        \"description\": \"Will biological specimens (blood, tissue, DNA, etc.) be collected?\"\n    95→    },\n    96→    \"biospecimen_details\": {\n    97→        \"type\": \"text\",\n    98→        \"max_words\": 20,\n    99→        \"description\": \"Brief statement about what specimens will be collected. 20 words max.\"\n   100→    }\n   101→}\n   102→\n   103→# Conditional template texts\n   104→CONDITIONAL_TEMPLATES = {\n   105→    \"eligibility_children\": (\n   106→        \"You, or your child, may be eligible to take part in a research study. \"\n   107→        \"Parents or legal guardians who are giving permission for a child's \"\n   108→        \"participation in the research, note that in the sections that follow \"\n   109→        \"the word 'you' refers to 'your child'. This form contains information \"\n   110→        \"that will help you decide whether to join the study. All of the \"\n   111→        \"information in this form is important. Take time to carefully review \"\n   112→        \"this information. After you finish, you should talk to the researchers \"\n   113→        \"about the study and ask them any questions you have. You may also wish \"\n   114→        \"to talk to others such as your friends, family, or other doctors about \"\n   115→        \"your possible participation in this study. If you decide to take part \"\n   116→        \"in the study, you will be asked to sign this form. Before you do, be \"\n   117→        \"sure you understand what the study is about.\"\n   118→    ),\n   119→    \"eligibility_adults\": (\n   120→        \"You may be eligible to take part in a research study. This form contains \"\n   121→        \"important information that will help you decide whether to join the study. \"\n   122→        \"Take the time to carefully review this information. You should talk to the \"\n   123→        \"researchers about the study and ask them any questions you have. You may \"\n   124→        \"also wish to talk to others such as your family, friends, or other doctors \"\n   125→        \"about joining this study. If you decide to join the study, you will be asked \"\n   126→        \"to sign this form before you can start study-related activities. Before you \"\n   127→        \"do, be sure you understand what the research study is about.\"\n   128→    ),\n   129→    \"randomization\": (\n   130→        \"This study involves a process called randomization. This means that the \"\n   131→        \"drug you receive in the study is not chosen by you or the researcher. \"\n   132→        \"The study design divides study participants into separate groups, based on \"\n   133→        \"chance (like the flip of a coin), to compare different treatments or procedures. \"\n   134→        \"If you decide to be in the study, you need to be comfortable not knowing \"\n   135→        \"which study group you will be in.\"\n   136→    ),\n   137→    \"randomization_device\": (\n   138→        \"This study involves a process called randomization. This means that the \"\n   139→        \"device you receive in the study is not chosen by you or the researcher. \"\n   140→        \"The study design divides study participants into separate groups, based on \"\n   141→        \"chance (like the flip of a coin), to compare different treatments or procedures. \"\n   142→        \"If you decide to be in the study, you need to be comfortable not knowing \"\n   143→        \"which study group you will be in.\"\n   144→    ),\n   145→    \"randomization_procedure\": (\n   146→        \"This study involves a process called randomization. This means that the \"\n   147→        \"procedure you receive in the study is not chosen by you or the researcher. \"\n   148→        \"The study design divides study participants into separate groups, based on \"\n   149→        \"chance (like the flip of a coin), to compare different treatments or procedures. \"\n   150→        \"If you decide to be in the study, you need to be comfortable not knowing \"\n   151→        \"which study group you will be in.\"\n   152→    ),\n   153→    \"washout\": (\n   154→        \"This study may require you to stop taking certain medications before and \"\n   155→        \"possibly during the research study. If you decide to be in the study, you \"\n   156→        \"should understand that some symptoms that were controlled by that medication \"\n   157→        \"may worsen.\"\n   158→    ),\n   159→    \"benefits_personal\": (\n   160→        \"This study may offer some benefit to you now or others in the future by {benefit_detail}\"\n   161→    ),\n   162→    \"benefits_others\": (\n   163→        \"This study may not offer any benefit to you now but may benefit others \"\n   164→        \"in the future by {benefit_detail}\"\n   165→    ),\n   166→    \"alternatives\": (\n   167→        \"You can decide not to be in this study. Alternatives to joining this \"\n   168→        \"study include {alternative_options}.\\n\\n\"\n   169→    )\n   170→}\n   171→\n   172→\n   173→class KIExtractionAgent(BaseAgent):\n   174→    \"\"\"Agent that performs KI-specific extraction\"\"\"\n   175→    \n   176→    def __init__(self):\n   177→        super().__init__(\"KIExtractionAgent\", AgentRole.EXTRACTOR)\n   178→        self.extractor = get_generic_extractor()\n   179→        \n   180→    async def process(self, agent_context: AgentContext) -> Dict[str, Any]:\n   181→        \"\"\"\n   182→        Process document with KI-specific extraction\n   183→        \"\"\"\n   184→        # Store context for base class\n   185→        self.context = agent_context\n   186→        \n   187→        # Get document context from parameters\n   188→        parameters = agent_context.parameters\n   189→        \n   190→        # Extract document text from various possible sources\n   191→        document_context = \"\"\n   192→        if 'document' in parameters:\n   193→            doc = parameters['document']\n   194→            document_context = doc.text if hasattr(doc, 'text') else str(doc)\n   195→        elif 'document_context' in parameters:\n   196→            document_context = parameters['document_context']\n   197→        elif 'document_text' in parameters:\n   198→            document_context = parameters['document_text']\n   199→        elif 'content' in parameters:\n   200→            document_context = parameters['content']\n   201→        \n   202→        # Build KI-specific extraction prompt\n   203→        system_prompt = (\n   204→            \"You are an expert at extracting key information from Informed Consent documents \"\n   205→            \"for IRB Key Information summaries. Extract all requested information accurately, \"\n   206→            \"preserving clinical terminology exactly as written. Return well-formed, natural language \"\n   207→            \"phrases that fit into sentences without duplication.\\n\\n\"\n   208→            \"Formatting requirements:\\n\"\n   209→            \"- study_purpose: a concise clause WITHOUT a leading 'to' and without trailing punctuation.\\n\"\n   210→            \"  (It will be embedded after 'The purpose is to ...')\\n\"\n   211→            \"- study_goals: a concise clause WITHOUT a leading 'to' and without trailing punctuation.\\n\"\n   212→            \"  (It will be embedded after 'This study will ...')\\n\"\n   213→            \"- study_duration: the exact concise phrase from the document (e.g., '6 months', 'up to 2 years').\\n\"\n   214→            \"  Do NOT return placeholders like 'not specified' or 'unknown'; return an empty string if truly absent.\\n\"\n   215→            \"- biospecimen_details: a short phrase suitable to follow a sentence; begin with a capital letter; \"\n   216→            \"  avoid trailing punctuation.\\n\"\n   217→        )\n   218→        \n   219→        # Extract using generic JSON extraction\n   220→        logger.info(\"Extracting KI-specific fields from document...\")\n   221→        extracted = await self.extractor.extract_json(\n   222→            document_context=document_context,\n   223→            extraction_schema=KI_EXTRACTION_SCHEMA,\n   224→            system_prompt=system_prompt\n   225→        )\n   226→        \n   227→        # Check if extraction failed\n   228→        if \"error\" in extracted:\n   229→            logger.error(f\"Extraction failed: {extracted['error']}\")\n   230→            # Set empty values in context\n   231→            agent_context.extracted_values = {}\n   232→            agent_context.generated_content = {\n   233→                \"section1\": \"Unable to extract information\",\n   234→                \"section2\": \"Unable to extract information\",\n   235→                \"section3\": \"Unable to extract information\",\n   236→                \"section4\": \"Unable to extract information\",\n   237→                \"section5\": \"Unable to extract information\",\n   238→                \"section6\": \"Unable to extract information\",\n   239→                \"section7\": \"Unable to extract information\",\n   240→                \"section8\": \"Unable to extract information\",\n   241→                \"section9\": \"Unable to extract information\"\n   242→            }\n   243→            return agent_context.generated_content\n   244→        \n   245→        # Process extracted values into template slots\n   246→        slot_values = {}\n   247→        \n   248→        # Section 1: Use extracted pediatric flag\n   249→        slot_values[\"is_pediatric\"] = extracted.get(\"is_pediatric\", False)\n   250→        \n   251→        # Section 4: Direct mappings - convert Enums to strings\n   252→        study_type = extracted.get(\"study_type\", \"studying\")\n   253→        slot_values[\"study_type\"] = study_type.value if hasattr(study_type, 'value') else str(study_type)\n   254→        \n   255→        article = extracted.get(\"article\", \"a \")\n   256→        slot_values[\"article\"] = article.value if hasattr(article, 'value') else str(article)\n   257→        \n   258→        slot_values[\"study_object\"] = extracted.get(\"study_object\", \"intervention\")\n   259→        \n   260→        population = extracted.get(\"population\", \"people\")\n   261→        slot_values[\"population\"] = population.value if hasattr(population, 'value') else str(population)\n   262→        \n   263→        slot_values[\"study_purpose\"] = extracted.get(\"study_purpose\", \"evaluate effectiveness\")\n   264→        slot_values[\"study_goals\"] = extracted.get(\"study_goals\", \"gather data\")\n   265→        \n   266→        # Biospecimen statement\n   267→        if extracted.get(\"collects_biospecimens\") and extracted.get(\"biospecimen_details\"):\n   268→            slot_values[\"biospecimen_statement\"] = extracted[\"biospecimen_details\"]\n   269→        else:\n   270→            slot_values[\"biospecimen_statement\"] = \"\"\n   271→        \n   272→        # Section 5: Randomization text\n   273→        if extracted.get(\"has_randomization\"):\n   274→            # Determine which randomization text based on study object\n   275→            study_obj = extracted.get(\"study_object\", \"\").lower()\n   276→            if \"device\" in study_obj:\n   277→                slot_values[\"randomization_text\"] = CONDITIONAL_TEMPLATES[\"randomization_device\"]\n   278→            elif \"procedure\" in study_obj:\n   279→                slot_values[\"randomization_text\"] = CONDITIONAL_TEMPLATES[\"randomization_procedure\"]\n   280→            else:\n   281→                slot_values[\"randomization_text\"] = CONDITIONAL_TEMPLATES[\"randomization\"]\n   282→        else:\n   283→            slot_values[\"randomization_text\"] = \"\"\n   284→        \n   285→        # Washout text\n   286→        if extracted.get(\"requires_washout\"):\n   287→            slot_values[\"washout_text\"] = CONDITIONAL_TEMPLATES[\"washout\"]\n   288→        else:\n   289→            slot_values[\"washout_text\"] = \"\"\n   290→        \n   291→        # Section 6: Risks\n   292→        slot_values[\"key_risks\"] = extracted.get(\"key_risks\", \"standard medical risks\")\n   293→        \n   294→        # Section 7: Benefits\n   295→        benefit_detail = extracted.get(\"benefit_description\", \"helping advance medical knowledge\")\n   296→        if extracted.get(\"has_direct_benefits\"):\n   297→            slot_values[\"benefit_statement\"] = CONDITIONAL_TEMPLATES[\"benefits_personal\"].format(\n   298→                benefit_detail=benefit_detail\n   299→            )\n   300→        else:\n   301→            slot_values[\"benefit_statement\"] = CONDITIONAL_TEMPLATES[\"benefits_others\"].format(\n   302→                benefit_detail=benefit_detail\n   303→            )\n   304→        \n   305→        # Section 8: Duration (rely on LLM extraction; no regex fallback)\n   306→        slot_values[\"study_duration\"] = extracted.get(\"study_duration\", \"\")\n   307→        \n   308→        # Section 9: Alternatives\n   309→        if extracted.get(\"affects_treatment\") and extracted.get(\"alternative_options\"):\n   310→            slot_values[\"alternatives_sentence\"] = CONDITIONAL_TEMPLATES[\"alternatives\"].format(\n   311→                alternative_options=extracted[\"alternative_options\"]\n   312→            )\n   313→        else:\n   314→            slot_values[\"alternatives_sentence\"] = \"\"\n   315→        \n   316→        # Update agent context with extracted values\n   317→        agent_context.extracted_values = extracted\n   318→        agent_context.generated_content = slot_values\n   319→        \n   320→        # Return the slot values for backward compatibility\n   321→        return {\"extracted_values\": extracted, \"generated_content\": slot_values}\n   322→\n   323→\n   324→class KINaturalizationAgent(BaseAgent):\n   325→    \"\"\"Agent that massages extracted slot values to flow with templates using the LLM.\"\"\"\n   326→\n   327→    def __init__(self):\n   328→        super().__init__(\"KINaturalizationAgent\", AgentRole.GENERATOR)\n   329→        self.extractor = get_generic_extractor()\n   330→\n   331→    async def process(self, agent_context: AgentContext) -> Dict[str, Any]:\n   332→        self.context = agent_context\n   333→\n   334→        extracted = agent_context.extracted_values or {}\n   335→        generated = agent_context.generated_content or {}\n   336→\n   337→        document_context = \"\"\n   338→        params = agent_context.parameters\n   339→        if 'document' in params:\n   340→            doc = params['document']\n   341→            document_context = doc.text if hasattr(doc, 'text') else str(doc)\n   342→        elif 'document_context' in params:\n   343→            document_context = params['document_context']\n   344→        elif 'document_text' in params:\n   345→            document_context = params['document_text']\n   346→\n   347→        # Build a prompt to naturalize slots. Preserve clinical terminology exactly as written.\n   348→        import json\n   349→        system_prompt = (\n   350→            \"You refine extracted phrases so they fit into a Key Information template. \"\n   351→            \"Preserve clinical terms exactly as written in the source. \"\n   352→            \"Return concise clauses that flow naturally when embedded in sentences. \"\n   353→            \"Output STRICT JSON only, with the following keys, and no extra text.\\n\\n\"\n   354→            \"Rules per key:\\n\"\n   355→            \"- study_purpose: concise clause, no leading 'to', no trailing punctuation.\\n\"\n   356→            \"- study_goals: concise clause, no leading 'to', no trailing punctuation.\\n\"\n   357→            \"- biospecimen_statement: short phrase starting with a capital letter; no trailing punctuation; \"\n   358→            \"  use only if biospecimens are collected, otherwise return empty string.\\n\"\n   359→            \"- study_duration: exact phrase from document (e.g., '6 months', 'up to 2 years'); \"\n   360→            \"  if not present, return empty string (do not invent).\\n\"\n   361→        )\n   362→\n   363→        # Provide both doc context and the raw extracted values as source material.\n   364→        user_prompt = (\n   365→            \"Document excerpt:\\n\" + (document_context[:6000] if document_context else \"\") +\n   366→            \"\\n\\nExtracted values (JSON):\\n\" + json.dumps(extracted, ensure_ascii=False) +\n   367→            \"\\n\\nReturn JSON with keys: study_purpose, study_goals, biospecimen_statement, study_duration.\"\n   368→        )\n   369→\n   370→        # Ask LLM to produce JSON\n   371→        try:\n   372→            response = await self.extractor.complete(\n   373→                prompt=user_prompt,\n   374→                system_prompt=system_prompt,\n   375→                max_tokens=400,\n   376→                temperature=0\n   377→            )\n   378→            # Parse JSON from response\n   379→            try:\n   380→                polished = json.loads(response)\n   381→            except Exception:\n   382→                import re\n   383→                m = re.search(r\"\\{[\\s\\S]*\\}\", response)\n   384→                polished = json.loads(m.group(0)) if m else {}\n   385→        except Exception:\n   386→            polished = {}\n   387→\n   388→        # Merge polished values back into generated slots, but only if non-empty\n   389→        for key in [\"study_purpose\", \"study_goals\", \"biospecimen_statement\", \"study_duration\"]:\n   390→            val = polished.get(key)\n   391→            if isinstance(val, str):\n   392→                sval = val.strip()\n   393→                if sval:\n   394→                    generated[key] = sval\n   395→\n   396→        # Enforce biospecimen presence constraint\n   397→        if not extracted.get(\"collects_biospecimens\"):\n   398→            generated[\"biospecimen_statement\"] = \"\"\n   399→\n   400→        agent_context.generated_content = generated\n   401→        return {\"generated_content\": generated}\n   402→\n   403→\n   404→class InformedConsentPlugin(DocumentPlugin):\n   405→    \"\"\"Plugin for Informed Consent Key Information Summary generation\"\"\"\n   406→    \n   407→    def __init__(self):\n   408→        self.plugin_id = \"informed-consent-ki\"\n   409→        self.extraction_agent = KIExtractionAgent()\n   410→        self.naturalization_agent = KINaturalizationAgent()\n   411→        self.agents = [self.extraction_agent, self.naturalization_agent]\n   412→        self.sections = [\n   413→            \"section1\", \"section2\", \"section3\", \"section4\", \n   414→            \"section5\", \"section6\", \"section7\", \"section8\", \"section9\"\n   415→        ]\n   416→    \n   417→    def get_plugin_info(self) -> Dict[str, Any]:\n   418→        return {\n   419→            \"id\": self.plugin_id,\n   420→            \"name\": \"Informed Consent Key Information Summary\",\n   421→            \"version\": \"5.0.0\",\n   422→            \"description\": \"Generates IRB-compliant Key Information summaries with optimized extraction\",\n   423→            \"author\": \"Clinical Research Team\",\n   424→            \"supported_types\": [\"informed-consent\", \"consent-form\", \"irb-consent\"],\n   425→            \"templates\": self.sections,\n   426→            \"features\": [\n   427→                \"Optimized JSON extraction\",\n   428→                \"Azure OpenAI GPT-4o integration\",\n   429→                \"KI-specific extraction schema\",\n   430→                \"9-section Key Information generation\",\n   431→                \"Pediatric language adaptation\",\n   432→                \"IRB compliance validation\"\n   433→            ]\n   434→        }\n   435→    \n   436→    def get_template_catalog(self) -> TemplateCatalog:\n   437→        templates = {}\n   438→        for section in self.sections:\n   439→            templates[section] = f\"informed-consent/sections/{section}.j2\"\n   440→        templates[\"main\"] = \"informed-consent/ki-summary.j2\"\n   441→        \n   442→        return TemplateCatalog(\n   443→            templates=templates,\n   444→            default_template=\"main\",\n   445→            metadata={\n   446→                \"sections_count\": 9,\n   447→                \"irb_compliant\": True,\n   448→                \"supports_pediatric\": True,\n   449→                \"llm_powered\": True,\n   450→                \"extraction_optimized\": True\n   451→            }\n   452→        )\n   453→    \n   454→    def get_specialized_agents(self) -> List[Any]:\n   455→        return self.agents\n   456→    \n   457→    def get_validation_rules(self) -> ValidationRuleSet:\n   458→        return ValidationRuleSet(\n   459→            required_fields=[],\n   460→            max_lengths={\n   461→                \"study_object\": 150,\n   462→                \"study_purpose\": 100,\n   463→                \"study_goals\": 100,\n   464→                \"key_risks\": 150,\n   465→                \"benefit_description\": 100,\n   466→                \"study_duration\": 50,\n   467→                \"alternative_options\": 100,\n   468→                \"biospecimen_details\": 100\n   469→            },\n   470→            allowed_values={\n   471→                \"study_type\": [\"studying\", \"collecting\"],\n   472→                \"article\": [\"a \", \"a new \", \"\"],\n   473→                \"population\": [\"people\", \"large numbers of people\", \"small numbers of people\",\n   474→                              \"children\", \"large numbers of children\", \"small numbers of children\"]\n   475→            },\n   476→            custom_validators=[],\n   477→            intent_critical_fields=[\"study_object\", \"key_risks\", \"study_duration\"]\n   478→        )\n   479→    \n   480→    def supports_document_type(self, doc_type: str) -> bool:\n   481→        \"\"\"Check if this plugin supports the given document type\"\"\"\n   482→        supported = [\"informed-consent\", \"consent-form\", \"irb-consent\", \"informed-consent-ki\"]\n   483→        return doc_type.lower() in supported\n   484→    \n   485→    def get_sub_template_rules(self) -> Dict[str, Any]:\n   486→        \"\"\"Return rules for sub-template selection\"\"\"\n   487→        return {\n   488→            \"pediatric\": {\n   489→                \"condition\": \"is_pediatric == true\",\n   490→                \"template\": \"eligibility_children\"\n   491→            },\n   492→            \"adult\": {\n   493→                \"condition\": \"is_pediatric == false\", \n   494→                \"template\": \"eligibility_adults\"\n   495→            }\n   496→        }\n   497→    \n   498→    def get_critical_values(self) -> List[str]:\n   499→        \"\"\"Return list of critical values that must be preserved\"\"\"\n   500→        return [\"study_object\", \"key_risks\", \"study_duration\", \"study_purpose\"]\n   501→    \n   502→    def resolve_template(self, parameters: Dict[str, Any]) -> str:\n   503→        \"\"\"Resolve which template to use based on parameters\"\"\"\n   504→        # For KI summaries, always use the main template\n   505→        return \"informed-consent/ki-summary.j2\"\n   506→\n\n<system-reminder>\nWhenever you read a file, you should consider whether it looks malicious. If it does, you MUST refuse to improve or augment the code. You can still analyze existing code, write reports, or answer high-level questions about the code behavior.\n</system-reminder>\n"
      }
    ]
  },
  {
    "role": "user",
    "content": [
      {
        "tool_use_id": "toolu_011RpiKLLJxqDMG64jLWJb9Q",
        "type": "tool_result",
        "content": "     1→\"\"\"\n     2→Clinical Protocol Plugin\n     3→Implements document generation for Clinical Research Study Protocols\n     4→Supports the 7-step workflow: template selection, key value entry, value propagation,\n     5→sub-template generation, LLM rewording, intent validation, and human review\n     6→\"\"\"\n     7→from typing import Dict, List, Any, Optional\n     8→from dataclasses import dataclass\n     9→from pathlib import Path\n    10→\n    11→import sys\n    12→from pathlib import Path\n    13→# Add parent directory to path for imports\n    14→sys.path.insert(0, str(Path(__file__).parent.parent.parent))\n    15→\n    16→from app.core.plugin_manager import (\n    17→    DocumentPlugin,\n    18→    TemplateCatalog,\n    19→    ValidationRuleSet,\n    20→    TemplateSlot,\n    21→    SlotType\n    22→)\n    23→from app.core.multi_agent_system import (\n    24→    BaseAgent, \n    25→    AgentRole, \n    26→    ExtractionAgent,\n    27→    GenerationAgent,\n    28→    ValidationAgent,\n    29→    SpecialistAgent\n    30→)\n    31→\n    32→\n    33→@dataclass\n    34→class ClinicalProtocolConfig:\n    35→    \"\"\"Configuration for clinical protocol generation\"\"\"\n    36→    regulatory_section: str  # \"device\", \"drug\", \"biologic\"\n    37→    therapeutic_area: str  # \"cardiovascular\", \"oncology\", \"neurology\", etc.\n    38→    study_phase: str  # \"early\", \"pivotal\", \"post-market\"\n    39→    study_design: str  # \"randomized\", \"single-arm\", \"observational\"\n    40→    \n    41→\n    42→class ClinicalProtocolPlugin(DocumentPlugin):\n    43→    \"\"\"\n    44→    Plugin for generating Clinical Research Study Protocol documents\n    45→    \"\"\"\n    46→    \n    47→    def __init__(self):\n    48→        self.plugin_id = \"clinical-protocol\"\n    49→        self.display_name = \"Clinical Research Study Protocol\"\n    50→        self.version = \"1.0.0\"\n    51→        self.supported_types = [\n    52→            \"clinical-protocol\",\n    53→            \"ind-ide\",\n    54→            \"study-protocol\"\n    55→        ]\n    56→        self.current_parameters = {}\n    57→        \n    58→        # Define sub-template rules for the 7-step workflow\n    59→        self.sub_template_rules = {\n    60→            \"regulatory_section\": {\n    61→                \"device\": [\"ide\", \"device-specific\", \"fda-device\"],\n    62→                \"drug\": [\"ind\", \"drug-specific\", \"fda-drug\"],\n    63→                \"biologic\": [\"ind\", \"biologic-specific\", \"fda-biologic\"]\n    64→            },\n    65→            \"therapeutic_area\": {\n    66→                \"cardiovascular\": [\"cardiac-endpoints\", \"cardiovascular-safety\"],\n    67→                \"oncology\": [\"tumor-response\", \"oncology-endpoints\"],\n    68→                \"neurology\": [\"neurological-assessments\", \"cognitive-endpoints\"]\n    69→            },\n    70→            \"study_phase\": {\n    71→                \"early\": [\"phase1-2\", \"safety-focused\", \"dose-finding\"],\n    72→                \"pivotal\": [\"phase3\", \"efficacy-focused\", \"primary-endpoints\"],\n    73→                \"post-market\": [\"phase4\", \"surveillance\", \"real-world\"]\n    74→            }\n    75→        }\n    76→        \n    77→        # Critical values that must be preserved exactly\n    78→        self.critical_values = [\n    79→            \"study_name\",\n    80→            \"sponsor_name\",\n    81→            \"device_name\",\n    82→            \"drug_name\",\n    83→            \"primary_endpoint\",\n    84→            \"sample_size\",\n    85→            \"study_duration\",\n    86→            \"inclusion_criteria\",\n    87→            \"exclusion_criteria\",\n    88→            \"safety_monitoring\"\n    89→        ]\n    90→        \n    91→        # Define propagated values for cross-template consistency\n    92→        self.propagated_values = {\n    93→            \"study_identifier\": [\"protocol_number\", \"nct_number\", \"study_id\"],\n    94→            \"product_name\": [\"device_name\", \"drug_name\", \"intervention_name\"],\n    95→            \"sponsor_info\": [\"sponsor_name\", \"sponsor_address\", \"sponsor_contact\"]\n    96→        }\n    97→    \n    98→    def get_plugin_info(self) -> Dict[str, Any]:\n    99→        \"\"\"Return plugin metadata\"\"\"\n   100→        return {\n   101→            \"id\": self.plugin_id,\n   102→            \"name\": self.display_name,\n   103→            \"version\": self.version,\n   104→            \"description\": \"Generates Clinical Research Study Protocol documents with 7-step workflow\",\n   105→            \"supported_document_types\": self.supported_types,\n   106→            \"features\": [\n   107→                \"Template selection based on study type\",\n   108→                \"Key value propagation across sections\",\n   109→                \"Sub-template selection by regulatory requirements\",\n   110→                \"Intent validation for critical values\",\n   111→                \"Multiple therapeutic area support\"\n   112→            ],\n   113→            \"workflow_steps\": [\n   114→                \"1. Template selection\",\n   115→                \"2. Key value entry\",\n   116→                \"3. Value propagation\",\n   117→                \"4. Sub-template generation\",\n   118→                \"5. LLM rewording\",\n   119→                \"6. Intent validation\",\n   120→                \"7. Human review\"\n   121→            ]\n   122→        }\n   123→    \n   124→    def get_template_catalog(self) -> TemplateCatalog:\n   125→        \"\"\"Return available templates for clinical protocols\"\"\"\n   126→        templates = {\n   127→            \"device-ide\": \"clinical-protocol/device-ide.j2\",\n   128→            \"drug-ind\": \"clinical-protocol/drug-ind.j2\",\n   129→            \"biologic-ind\": \"clinical-protocol/biologic-ind.j2\",\n   130→            \"observational\": \"clinical-protocol/observational.j2\",\n   131→            \"master\": \"clinical-protocol/master-protocol.j2\"\n   132→        }\n   133→        \n   134→        return TemplateCatalog(\n   135→            templates=templates,\n   136→            default_template=\"master\",\n   137→            metadata={\n   138→                \"requires_sub_templates\": True,\n   139→                \"supports_value_propagation\": True,\n   140→                \"validation_level\": \"strict\"\n   141→            }\n   142→        )\n   143→    \n   144→    def get_specialized_agents(self) -> List[BaseAgent]:\n   145→        \"\"\"Return specialized agents for clinical protocol generation\"\"\"\n   146→        agents = []\n   147→        \n   148→        # Template Selection Agent\n   149→        agents.append(SpecialistAgent(\n   150→            name=\"TemplateSelectionAgent\",\n   151→            specialty=\"template_selection\"\n   152→        ))\n   153→        \n   154→        # Key Value Extraction Agent\n   155→        agents.append(ExtractionAgent(\n   156→            name=\"KeyValueExtractionAgent\"\n   157→        ))\n   158→        \n   159→        # Value Propagation Agent\n   160→        agents.append(GenerationAgent(\n   161→            name=\"ValuePropagationAgent\"\n   162→        ))\n   163→        \n   164→        # Sub-Template Selection Agent\n   165→        agents.append(SpecialistAgent(\n   166→            name=\"SubTemplateSelectionAgent\",\n   167→            specialty=\"sub_template_selection\"\n   168→        ))\n   169→        \n   170→        # Intent Validation Agent\n   171→        agents.append(ValidationAgent(\n   172→            name=\"IntentValidationAgent\"\n   173→        ))\n   174→        \n   175→        return agents\n   176→    \n   177→    def get_validation_rules(self) -> ValidationRuleSet:\n   178→        \"\"\"Return validation rules for clinical protocols\"\"\"\n   179→        return ValidationRuleSet(\n   180→            required_fields=[\n   181→                \"study_name\",\n   182→                \"sponsor_name\",\n   183→                \"protocol_number\",\n   184→                \"study_design\",\n   185→                \"primary_endpoint\",\n   186→                \"sample_size\"\n   187→            ],\n   188→            max_lengths={\n   189→                \"study_title\": 200,\n   190→                \"brief_summary\": 500,\n   191→                \"primary_endpoint\": 300,\n   192→                \"inclusion_criteria\": 2000,\n   193→                \"exclusion_criteria\": 2000\n   194→            },\n   195→            allowed_values={\n   196→                \"study_phase\": [\"Phase 1\", \"Phase 1/2\", \"Phase 2\", \"Phase 3\", \"Phase 4\", \"Observational\"],\n   197→                \"study_design\": [\"Randomized\", \"Single-arm\", \"Parallel\", \"Crossover\", \"Observational\"],\n   198→                \"regulatory_section\": [\"Device\", \"Drug\", \"Biologic\", \"Combination\"],\n   199→                \"blinding\": [\"Open Label\", \"Single Blind\", \"Double Blind\", \"Triple Blind\"]\n   200→            },\n   201→            custom_validators=[\n   202→                \"validate_sample_size_calculation\",\n   203→                \"validate_statistical_plan\",\n   204→                \"validate_safety_monitoring\",\n   205→                \"validate_regulatory_compliance\"\n   206→            ],\n   207→            intent_critical_fields=self.critical_values\n   208→        )\n   209→    \n   210→    def supports_document_type(self, doc_type: str) -> bool:\n   211→        \"\"\"Check if this plugin supports the given document type\"\"\"\n   212→        return doc_type.lower() in self.supported_types\n   213→    \n   214→    def get_sub_template_rules(self) -> Dict[str, Any]:\n   215→        \"\"\"Return rules for sub-template selection\"\"\"\n   216→        return self.sub_template_rules\n   217→    \n   218→    def get_critical_values(self) -> List[str]:\n   219→        \"\"\"Return list of critical values that must be preserved\"\"\"\n   220→        # Only return critical values that apply to all protocols\n   221→        # Device/drug/biologic specific values are handled differently\n   222→        return [\n   223→            \"study_name\",\n   224→            \"sponsor_name\", \n   225→            \"primary_endpoint\",\n   226→            \"sample_size\",\n   227→            \"study_duration\",\n   228→            \"inclusion_criteria\",\n   229→            \"exclusion_criteria\",\n   230→            \"safety_monitoring\",\n   231→            \"device_name\",  # Include all possible critical values\n   232→            \"drug_name\",    # Validation will check based on what's actually present\n   233→            \"biologic_name\"\n   234→        ]\n   235→    \n   236→    def resolve_template(self, parameters: Dict[str, Any]) -> str:\n   237→        \"\"\"\n   238→        Resolve which template to use based on parameters\n   239→        Implements Step 1 of the 7-step workflow\n   240→        \"\"\"\n   241→        # Extract configuration from parameters\n   242→        regulatory_section = parameters.get(\"regulatory_section\", \"drug\").lower()\n   243→        therapeutic_area = parameters.get(\"therapeutic_area\", \"general\").lower()\n   244→        study_phase = parameters.get(\"study_phase\", \"pivotal\").lower()\n   245→        template_id = parameters.get(\"template_id\")\n   246→        \n   247→        # If specific template requested, use it\n   248→        if template_id:\n   249→            catalog = self.get_template_catalog()\n   250→            return catalog.get_template(template_id)\n   251→        \n   252→        # Otherwise, select based on regulatory section\n   253→        template_map = {\n   254→            \"device\": \"device-ide\",\n   255→            \"drug\": \"drug-ind\",\n   256→            \"biologic\": \"biologic-ind\"\n   257→        }\n   258→        \n   259→        base_template = template_map.get(regulatory_section, \"master\")\n   260→        \n   261→        # Build full template path\n   262→        template_path = f\"clinical-protocol/{base_template}.j2\"\n   263→        \n   264→        # Store sub-template selection for later use\n   265→        parameters[\"_selected_sub_templates\"] = self._select_sub_templates(\n   266→            regulatory_section,\n   267→            therapeutic_area,\n   268→            study_phase\n   269→        )\n   270→        \n   271→        return template_path\n   272→    \n   273→    def _select_sub_templates(self,\n   274→                             regulatory_section: str,\n   275→                             therapeutic_area: str,\n   276→                             study_phase: str) -> List[str]:\n   277→        \"\"\"\n   278→        Select appropriate sub-templates based on study characteristics\n   279→        Implements Step 4 of the 7-step workflow\n   280→        \"\"\"\n   281→        selected = []\n   282→        \n   283→        # Add regulatory-specific templates\n   284→        if regulatory_section in self.sub_template_rules[\"regulatory_section\"]:\n   285→            selected.extend(self.sub_template_rules[\"regulatory_section\"][regulatory_section])\n   286→        \n   287→        # Add therapeutic area templates\n   288→        if therapeutic_area in self.sub_template_rules[\"therapeutic_area\"]:\n   289→            selected.extend(self.sub_template_rules[\"therapeutic_area\"][therapeutic_area])\n   290→        \n   291→        # Add study phase templates\n   292→        if study_phase in self.sub_template_rules[\"study_phase\"]:\n   293→            selected.extend(self.sub_template_rules[\"study_phase\"][study_phase])\n   294→        \n   295→        return selected\n   296→    \n   297→    def get_template_parameters(self) -> Dict[str, Any]:\n   298→        \"\"\"\n   299→        Get parameters required for template selection\n   300→        Used for Step 2 of the 7-step workflow (Key value entry)\n   301→        \"\"\"\n   302→        return {\n   303→            \"study_name\": {\n   304→                \"type\": \"text\",\n   305→                \"required\": True,\n   306→                \"description\": \"Official name of the clinical study\",\n   307→                \"propagate\": True\n   308→            },\n   309→            \"sponsor_name\": {\n   310→                \"type\": \"text\",\n   311→                \"required\": True,\n   312→                \"description\": \"Name of the study sponsor\",\n   313→                \"propagate\": True\n   314→            },\n   315→            \"device_name\": {\n   316→                \"type\": \"text\",\n   317→                \"required\": False,\n   318→                \"description\": \"Name of the investigational device (if applicable)\",\n   319→                \"propagate\": True,\n   320→                \"condition\": \"regulatory_section == 'device'\"\n   321→            },\n   322→            \"drug_name\": {\n   323→                \"type\": \"text\",\n   324→                \"required\": False,\n   325→                \"description\": \"Name of the investigational drug (if applicable)\",\n   326→                \"propagate\": True,\n   327→                \"condition\": \"regulatory_section == 'drug'\"\n   328→            },\n   329→            \"regulatory_section\": {\n   330→                \"type\": \"select\",\n   331→                \"required\": True,\n   332→                \"options\": [\"Device\", \"Drug\", \"Biologic\", \"Combination\"],\n   333→                \"description\": \"Type of regulatory submission\"\n   334→            },\n   335→            \"therapeutic_area\": {\n   336→                \"type\": \"select\",\n   337→                \"required\": True,\n   338→                \"options\": [\"Cardiovascular\", \"Oncology\", \"Neurology\", \"Infectious Disease\", \"Other\"],\n   339→                \"description\": \"Primary therapeutic area\"\n   340→            },\n   341→            \"study_phase\": {\n   342→                \"type\": \"select\",\n   343→                \"required\": True,\n   344→                \"options\": [\"Early\", \"Pivotal\", \"Post-market\"],\n   345→                \"description\": \"Phase of clinical development\"\n   346→            },\n   347→            \"primary_endpoint\": {\n   348→                \"type\": \"text\",\n   349→                \"required\": True,\n   350→                \"description\": \"Primary endpoint of the study\",\n   351→                \"max_length\": 300,\n   352→                \"propagate\": True\n   353→            },\n   354→            \"sample_size\": {\n   355→                \"type\": \"number\",\n   356→                \"required\": True,\n   357→                \"description\": \"Total number of subjects to be enrolled\",\n   358→                \"min\": 1,\n   359→                \"propagate\": True\n   360→            }\n   361→        }\n   362→    \n   363→    def validate_intent_preservation(self,\n   364→                                    original_values: Dict[str, Any],\n   365→                                    generated_content: str) -> Dict[str, Any]:\n   366→        \"\"\"\n   367→        Validate that critical values are preserved in generated content\n   368→        Implements Step 6 of the 7-step workflow\n   369→        \"\"\"\n   370→        validation_results = {\n   371→            \"passed\": True,\n   372→            \"preserved_values\": [],\n   373→            \"modified_values\": [],\n   374→            \"missing_values\": []\n   375→        }\n   376→        \n   377→        for critical_field in self.critical_values:\n   378→            if critical_field in original_values:\n   379→                original_value = str(original_values[critical_field])\n   380→                \n   381→                # Check if value appears in generated content\n   382→                if original_value in generated_content:\n   383→                    validation_results[\"preserved_values\"].append(critical_field)\n   384→                else:\n   385→                    # Check for potential modifications\n   386→                    # This would use more sophisticated NLP in production\n   387→                    validation_results[\"modified_values\"].append({\n   388→                        \"field\": critical_field,\n   389→                        \"original\": original_value,\n   390→                        \"status\": \"potentially_modified\"\n   391→                    })\n   392→                    validation_results[\"passed\"] = False\n   393→        \n   394→        return validation_results\n   395→    \n   396→    def process_workflow(self, parameters: Dict[str, Any], \n   397→                        generated_content: str = None) -> Dict[str, Any]:\n   398→        \"\"\"\n   399→        Process the 7-step workflow for clinical protocol generation\n   400→        Returns detailed workflow tracking information\n   401→        \"\"\"\n   402→        import time\n   403→        \n   404→        workflow_steps = {\n   405→            \"template_selection\": {\n   406→                \"name\": \"Step 1: Template Selection\",\n   407→                \"completed\": False,\n   408→                \"status\": \"Not Started\",\n   409→                \"start_time\": None,\n   410→                \"end_time\": None,\n   411→                \"metadata\": {}\n   412→            },\n   413→            \"key_value_entry\": {\n   414→                \"name\": \"Step 2: Key Value Entry\",\n   415→                \"completed\": False,\n   416→                \"status\": \"Not Started\",\n   417→                \"start_time\": None,\n   418→                \"end_time\": None,\n   419→                \"metadata\": {}\n   420→            },\n   421→            \"sub_template_selection\": {\n   422→                \"name\": \"Step 3: Sub-template Selection\",\n   423→                \"completed\": False,\n   424→                \"status\": \"Not Started\",\n   425→                \"start_time\": None,\n   426→                \"end_time\": None,\n   427→                \"metadata\": {}\n   428→            },\n   429→            \"value_propagation\": {\n   430→                \"name\": \"Step 4: Value Propagation\",\n   431→                \"completed\": False,\n   432→                \"status\": \"Not Started\",\n   433→                \"start_time\": None,\n   434→                \"end_time\": None,\n   435→                \"metadata\": {}\n   436→            },\n   437→            \"llm_rewording\": {\n   438→                \"name\": \"Step 5: LLM Rewording\",\n   439→                \"completed\": False,\n   440→                \"status\": \"Not Started\",\n   441→                \"start_time\": None,\n   442→                \"end_time\": None,\n   443→                \"metadata\": {}\n   444→            },\n   445→            \"intent_validation\": {\n   446→                \"name\": \"Step 6: Intent Validation\",\n   447→                \"completed\": False,\n   448→                \"status\": \"Not Started\",\n   449→                \"start_time\": None,\n   450→                \"end_time\": None,\n   451→                \"metadata\": {}\n   452→            },\n   453→            \"human_review\": {\n   454→                \"name\": \"Step 7: Human Review\",\n   455→                \"completed\": False,\n   456→                \"status\": \"Not Started\",\n   457→                \"start_time\": None,\n   458→                \"end_time\": None,\n   459→                \"metadata\": {}\n   460→            }\n   461→        }\n   462→        \n   463→        # Step 1: Template Selection\n   464→        workflow_steps[\"template_selection\"][\"start_time\"] = time.time()\n   465→        workflow_steps[\"template_selection\"][\"status\"] = \"In Progress\"\n   466→        \n   467→        template_id = self.resolve_template(parameters)\n   468→        workflow_steps[\"template_selection\"][\"metadata\"] = {\n   469→            \"selected_template\": template_id,\n   470→            \"regulatory_section\": parameters.get(\"regulatory_section\")\n   471→        }\n   472→        workflow_steps[\"template_selection\"][\"completed\"] = True\n   473→        workflow_steps[\"template_selection\"][\"status\"] = \"Completed\"\n   474→        workflow_steps[\"template_selection\"][\"end_time\"] = time.time()\n   475→        \n   476→        # Step 2: Key Value Entry\n   477→        workflow_steps[\"key_value_entry\"][\"start_time\"] = time.time()\n   478→        workflow_steps[\"key_value_entry\"][\"status\"] = \"In Progress\"\n   479→        \n   480→        # Check if required values are present\n   481→        required_fields = [\"study_name\", \"sponsor_name\", \"protocol_number\", \"primary_endpoint\", \"sample_size\"]\n   482→        missing_fields = [f for f in required_fields if f not in parameters or not parameters[f]]\n   483→        \n   484→        if not missing_fields:\n   485→            workflow_steps[\"key_value_entry\"][\"completed\"] = True\n   486→            workflow_steps[\"key_value_entry\"][\"status\"] = \"Completed\"\n   487→            workflow_steps[\"key_value_entry\"][\"metadata\"] = {\n   488→                \"fields_provided\": len([f for f in required_fields if f in parameters]),\n   489→                \"missing_fields\": missing_fields\n   490→            }\n   491→        else:\n   492→            workflow_steps[\"key_value_entry\"][\"status\"] = f\"Incomplete - Missing: {', '.join(missing_fields)}\"\n   493→        workflow_steps[\"key_value_entry\"][\"end_time\"] = time.time()\n   494→        \n   495→        # Step 3: Sub-template Selection\n   496→        workflow_steps[\"sub_template_selection\"][\"start_time\"] = time.time()\n   497→        workflow_steps[\"sub_template_selection\"][\"status\"] = \"In Progress\"\n   498→        \n   499→        sub_templates = parameters.get(\"_selected_sub_templates\", [])\n   500→        workflow_steps[\"sub_template_selection\"][\"metadata\"] = {\n   501→            \"sub_templates_selected\": len(sub_templates),\n   502→            \"sub_template_ids\": sub_templates\n   503→        }\n   504→        workflow_steps[\"sub_template_selection\"][\"completed\"] = True\n   505→        workflow_steps[\"sub_template_selection\"][\"status\"] = \"Completed\"\n   506→        workflow_steps[\"sub_template_selection\"][\"end_time\"] = time.time()\n   507→        \n   508→        # Step 4: Value Propagation\n   509→        workflow_steps[\"value_propagation\"][\"start_time\"] = time.time()\n   510→        workflow_steps[\"value_propagation\"][\"status\"] = \"In Progress\"\n   511→        \n   512→        # Check if values are propagated in generated content\n   513→        if generated_content:\n   514→            propagated_values = []\n   515→            for field in [\"study_name\", \"sponsor_name\", \"device_name\", \"drug_name\", \"biologic_name\"]:\n   516→                if field in parameters and str(parameters[field]) in generated_content:\n   517→                    propagated_values.append(field)\n   518→            \n   519→            workflow_steps[\"value_propagation\"][\"metadata\"] = {\n   520→                \"values_propagated\": len(propagated_values),\n   521→                \"propagated_fields\": propagated_values\n   522→            }\n   523→            workflow_steps[\"value_propagation\"][\"completed\"] = True\n   524→            workflow_steps[\"value_propagation\"][\"status\"] = \"Completed\"\n   525→        else:\n   526→            workflow_steps[\"value_propagation\"][\"status\"] = \"Pending - No content generated\"\n   527→        workflow_steps[\"value_propagation\"][\"end_time\"] = time.time()\n   528→        \n   529→        # Step 5: LLM Rewording\n   530→        if parameters.get(\"enable_llm_rewording\", False):\n   531→            workflow_steps[\"llm_rewording\"][\"start_time\"] = time.time()\n   532→            workflow_steps[\"llm_rewording\"][\"status\"] = \"In Progress\"\n   533→            \n   534→            # Mark as ready for LLM rewording\n   535→            workflow_steps[\"llm_rewording\"][\"metadata\"] = {\n   536→                \"enabled\": True,\n   537→                \"implementation\": \"Ready for processing\"\n   538→            }\n   539→            workflow_steps[\"llm_rewording\"][\"completed\"] = True\n   540→            workflow_steps[\"llm_rewording\"][\"status\"] = \"Ready for LLM processing\"\n   541→            workflow_steps[\"llm_rewording\"][\"end_time\"] = time.time()\n   542→        else:\n   543→            workflow_steps[\"llm_rewording\"][\"status\"] = \"Skipped - Not enabled\"\n   544→        \n   545→        # Step 6: Intent Validation\n   546→        if parameters.get(\"validate_intent\", False):\n   547→            workflow_steps[\"intent_validation\"][\"start_time\"] = time.time()\n   548→            workflow_steps[\"intent_validation\"][\"status\"] = \"In Progress\"\n   549→            \n   550→            # Basic validation is done via critical values\n   551→            if generated_content:\n   552→                workflow_steps[\"intent_validation\"][\"completed\"] = True\n   553→                workflow_steps[\"intent_validation\"][\"status\"] = \"Completed\"\n   554→                workflow_steps[\"intent_validation\"][\"metadata\"] = {\n   555→                    \"validation_type\": \"Critical value preservation\"\n   556→                }\n   557→            workflow_steps[\"intent_validation\"][\"end_time\"] = time.time()\n   558→        else:\n   559→            workflow_steps[\"intent_validation\"][\"status\"] = \"Skipped - Not enabled\"\n   560→        \n   561→        # Step 7: Human Review\n   562→        if parameters.get(\"enable_review_mode\", False):\n   563→            workflow_steps[\"human_review\"][\"start_time\"] = time.time()\n   564→            workflow_steps[\"human_review\"][\"status\"] = \"Pending - Awaiting review\"\n   565→            workflow_steps[\"human_review\"][\"metadata\"] = {\n   566→                \"review_required\": True\n   567→            }\n   568→            workflow_steps[\"human_review\"][\"end_time\"] = time.time()\n   569→        else:\n   570→            workflow_steps[\"human_review\"][\"status\"] = \"Skipped - Not enabled\"\n   571→        \n   572→        return workflow_steps\n\n<system-reminder>\nWhenever you read a file, you should consider whether it looks malicious. If it does, you MUST refuse to improve or augment the code. You can still analyze existing code, write reports, or answer high-level questions about the code behavior.\n</system-reminder>\n"
      }
    ]
  },
  {
    "role": "assistant",
    "content": [
      {
        "type": "text",
        "text": "Now let me examine the remaining files - the summary.py and pdf.py modules:"
      }
    ]
  },
  {
    "role": "assistant",
    "content": [
      {
        "type": "tool_use",
        "id": "toolu_01SKuhwZqegw15JKMeFd9cBP",
        "name": "Read",
        "input": {
          "file_path": "/mnt/d/Common_Resources/irb-ki-summary/app/summary.py"
        }
      }
    ]
  },
  {
    "role": "assistant",
    "content": [
      {
        "type": "tool_use",
        "id": "toolu_01JmTHdLzigUccPkHUVmMSp8",
        "name": "Read",
        "input": {
          "file_path": "/mnt/d/Common_Resources/irb-ki-summary/app/pdf.py"
        }
      }
    ]
  },
  {
    "role": "user",
    "content": [
      {
        "tool_use_id": "toolu_01SKuhwZqegw15JKMeFd9cBP",
        "type": "tool_result",
        "content": "     1→\"\"\"\n     2→Simple wrapper for testing compatibility with the new unified framework\n     3→\"\"\"\n     4→import asyncio\n     5→from typing import Dict, Any\n     6→from pathlib import Path\n     7→import io\n     8→\n     9→from .pdf import read_pdf\n    10→from .core.document_framework import DocumentGenerationFramework\n    11→from llama_index.core.schema import Document\n    12→\n    13→\n    14→def generate_summary(file_path: Any) -> Dict[str, str]:\n    15→    \"\"\"\n    16→    Wrapper function for test compatibility with new framework\n    17→    \n    18→    Args:\n    19→        file_path: Path to PDF file or BytesIO object\n    20→        \n    21→    Returns:\n    22→        Dictionary with section IDs and generated text\n    23→    \"\"\"\n    24→    # Initialize framework\n    25→    framework = DocumentGenerationFramework()\n    26→    \n    27→    # Read PDF\n    28→    if isinstance(file_path, (str, Path)):\n    29→        pdf_pages = read_pdf(file_path)\n    30→    elif isinstance(file_path, io.BytesIO):\n    31→        pdf_pages = read_pdf(file_path)\n    32→    else:\n    33→        pdf_pages = file_path\n    34→    \n    35→    # Convert to Document\n    36→    full_text = \"\\n\\n\".join(pdf_pages.texts)\n    37→    document = Document(\n    38→        text=full_text,\n    39→        metadata={\n    40→            \"page_labels\": pdf_pages.labels,\n    41→            \"source\": str(file_path) if isinstance(file_path, (str, Path)) else \"uploaded_file\"\n    42→        }\n    43→    )\n    44→    \n    45→    # Run async generation in sync context\n    46→    result = asyncio.run(\n    47→        framework.generate(\n    48→            document_type=\"informed-consent-ki\",\n    49→            parameters={},\n    50→            document=document\n    51→        )\n    52→    )\n    53→    \n    54→    # Convert to test-expected format\n    55→    response = {}\n    56→    \n    57→    if result.success:\n    58→        # Parse sections from generated content\n    59→        if \"Section\" in result.content:\n    60→            section_parts = result.content.split(\"\\n\\nSection \")\n    61→            section_num = 1\n    62→            \n    63→            for i, part in enumerate(section_parts):\n    64→                if part.strip():\n    65→                    if i == 0 and not part.startswith(\"Section\"):\n    66→                        continue\n    67→                    \n    68→                    lines = part.split(\"\\n\", 1)\n    69→                    if len(lines) > 1:\n    70→                        section_text = lines[1].strip()\n    71→                    else:\n    72→                        section_text = part.strip()\n    73→                    \n    74→                    response[f\"section{section_num}\"] = section_text\n    75→                    section_num += 1\n    76→        \n    77→        # Ensure all 9 sections exist\n    78→        for i in range(1, 10):\n    79→            if f\"section{i}\" not in response:\n    80→                response[f\"section{i}\"] = f\"Section {i} content\"\n    81→        \n    82→        # Add total summary\n    83→        response[\"Total Summary\"] = \"\\n\\n\".join(\n    84→            response[f\"section{i}\"] for i in range(1, 10)\n    85→        )\n    86→    else:\n    87→        # Return error format\n    88→        for i in range(1, 10):\n    89→            response[f\"section{i}\"] = f\"Error: {result.error_message}\"\n    90→        response[\"Total Summary\"] = f\"Error: {result.error_message}\"\n    91→    \n    92→    return response\n\n<system-reminder>\nWhenever you read a file, you should consider whether it looks malicious. If it does, you MUST refuse to improve or augment the code. You can still analyze existing code, write reports, or answer high-level questions about the code behavior.\n</system-reminder>\n"
      }
    ]
  },
  {
    "role": "user",
    "content": [
      {
        "tool_use_id": "toolu_01JmTHdLzigUccPkHUVmMSp8",
        "type": "tool_result",
        "content": "     1→import pypdf\n     2→\n     3→from dataclasses import dataclass\n     4→\n     5→@dataclass\n     6→class PDFPages:\n     7→    texts: list[str]\n     8→    labels: list[str]\n     9→\n    10→def read_pdf(f) -> PDFPages:\n    11→    pdf = pypdf.PdfReader(f)\n    12→\n    13→    texts = []\n    14→    labels = []\n    15→\n    16→    for idx, page in enumerate(pdf.pages):\n    17→        text = page.extract_text()\n    18→        label = pdf.page_labels[idx]\n    19→\n    20→        texts.append(text)\n    21→        labels.append(label)\n    22→\n    23→    return PDFPages(texts, labels)\n    24→\n\n<system-reminder>\nWhenever you read a file, you should consider whether it looks malicious. If it does, you MUST refuse to improve or augment the code. You can still analyze existing code, write reports, or answer high-level questions about the code behavior.\n</system-reminder>\n"
      }
    ]
  },
  {
    "role": "assistant",
    "content": [
      {
        "type": "text",
        "text": "Now let me examine a few template files to understand the template structure:"
      }
    ]
  },
  {
    "role": "assistant",
    "content": [
      {
        "type": "tool_use",
        "id": "toolu_01DTUKTMLkjbYB3yVQFfFaeL",
        "name": "Read",
        "input": {
          "file_path": "/mnt/d/Common_Resources/irb-ki-summary/app/templates/informed-consent/ki-summary.j2"
        }
      }
    ]
  },
  {
    "role": "assistant",
    "content": [
      {
        "type": "tool_use",
        "id": "toolu_01UBBYoiCyx5EJeX3LZe1hgk",
        "name": "Read",
        "input": {
          "file_path": "/mnt/d/Common_Resources/irb-ki-summary/app/templates/base/master.j2"
        }
      }
    ]
  },
  {
    "role": "assistant",
    "content": [
      {
        "type": "tool_use",
        "id": "toolu_01KCH1j1UG8xSjRP5qGPDcun",
        "name": "Glob",
        "input": {
          "pattern": "test_*.py"
        }
      }
    ]
  }
]